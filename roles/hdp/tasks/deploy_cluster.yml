# Deploy a basic HDP cluster with ZOOKEEPER, HDFS, YARN, HIVE, HBASE and RANGER

- name: create Hive PostgreSQL database
  postgresql_db:
    name: hive
  become_user: postgres

- name: create Hive user
  postgresql_user:
    db:  hive
    name: hive
    password: hive123
  become_user: postgres

- name: create Ranger PostgreSQL database
  postgresql_db:
    name: ranger
  become_user: postgres

- name: create Ranger user
  postgresql_user:
    db:  ranger
    name: ranger
    password: ranger123
  become_user: postgres

- name: add users to pg_hba.conf
  lineinfile:
    path: /var/lib/pgsql/data/pg_hba.conf
    regexp: "^host  all .* 0.0.0.0/0  md5"
    line: "host  all   ambari,mapred,hive,ranger 0.0.0.0/0  md5"
  notify: restart postgresql

- name: fix ranger directory permissions
  file:
    path: /etc/ranger/admin
    state: directory
    owner: ranger
    recurse: yes
  
- meta: flush_handlers

# Using Ambari REST API to provision the cluster. See
#  https://github.com/apache/ambari/tree/trunk/ambari-server/docs/api/v1
#  https://cwiki.apache.org/confluence/display/AMBARI/Blueprints#Blueprints-APIResourcesandSyntax
#  https://community.hortonworks.com/articles/47170/automate-hdp-installation-using-ambari-blueprints.html
# JSON payloads are built from Ansible dictionnaries

- name: prepare blueprint API
  set_fact:
    api_blueprint:
      Blueprints:
        blueprint_name: ansible
        stack_name: HDP
        stack_version: "{{ hdp.version }}"
      host_groups:
        - name: hostgroup1
          cardinality: 1
          components:
            - name: ZOOKEEPER_SERVER
            - name: NAMENODE
            - name: SECONDARY_NAMENODE
            - name: DATANODE
            - name: HDFS_CLIENT
            - name: RESOURCEMANAGER
            - name: NODEMANAGER
            - name: YARN_CLIENT
            - name: HISTORYSERVER
            - name: APP_TIMELINE_SERVER
            - name: HBASE_MASTER
            - name: HBASE_REGIONSERVER
            - name: HCAT
            - name: HIVE_SERVER
            - name: HIVE_METASTORE
            - name: INFRA_SOLR
            - name: RANGER_ADMIN
            - name: RANGER_USERSYNC
            #- name: RANGER_TAGSYNC
      configurations:
        - hive-site:
            properties:
              hive.execution.engine: mr
              javax.jdo.option.ConnectionDriverName: org.postgresql.Driver
              javax.jdo.option.ConnectionURL: jdbc:postgresql://localhost:5432/hive
              javax.jdo.option.ConnectionPassword : hive123
        - hive-env:
            properties:
              hive_database_type: postgres
              hive_database: "Existing PostgreSQL Database"
        - admin-properties:
            properties:
              DB_FLAVOR: POSTGRES
              db_user: ranger
              db_name: ranger
              db_password: ranger123
              db_host: localhost
              policymgr_external_url: http://localhost:6080
        - ranger-env:
            properties:
              create_db_dbuser: false
              ranger_user : ranger
              db_password: ranger123
              admin_password: "{{ cluster.ranger_password }}"
              ranger_admin_username: admin
              ranger_admin_password: "{{ cluster.ranger_password }}"
              ranger.authentication.method: UNIX
              is_solrCloud_enabled: true
        - ranger-admin-site:
            properties:
              ranger.jpa.jdbc.url: jdbc:postgresql://localhost:5432/ranger
              ranger.jpa.jdbc.driver: org.postgresql.Driver
              ranger.audit.solr.urls: http://{{ inventory_hostname }}:6083/solr/ranger_audits
              ranger.audit.solr.zookeepers: "{{ inventory_hostname }}:2181/infra-solr"

- name: create blueprint API
  uri:
    url: http://localhost:8080/api/v1/blueprints/singlenode?validate_topology=false
    method: POST
    user: admin
    password: "{{ ambari.password }}"
    body: "{{ api_blueprint | to_json }}"
    status_code: 201
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: prepare API payload
  set_fact:
    api_create_cluster:
      blueprint: ansible
      default_password: "{{ ambari.password }}"
      host_groups :
        - name: hostgroup1
          hosts:
            -  fqdn: "{{ inventory_hostname }}" 

- name: submit creation request for cluster {{ cluster.name }}
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ cluster.name }}
    method: POST
    user: admin
    password: "{{ ambari.password }}"
    body: "{{ api_create_cluster |to_json  }}"
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

# Installation takes around 3 min but initial start takes about 6 min (espeially Ranger takes time)
- name: wait for services to install and start (about 10 min)
  wait_for:
    msg: "Checking {{ item.key }}"
    port: "{{ item.value }}"
    host: "{{ inventory_hostname }}"
    timeout: 900
  with_dict: "{{ ports }}"

